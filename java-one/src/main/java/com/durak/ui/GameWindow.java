package com.durak.ui;

import com.durak.game.DurakGame;
import com.durak.model.Card;
import com.durak.model.Player;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.*;
import java.util.List;

public class GameWindow extends JFrame {
    private final DurakGame game;
    private final JPanel humanPanel;
    private final JPanel tablePanel;
    private final JPanel aiPanel;
    private final JLabel deckInfo;
    private final JLabel statusLabel;
    private final JButton endTurnButton;
    private final JButton takeCardsButton;
    private Card selectedCard;
    private final Color ATTACK_COLOR = new Color(255, 200, 200);
    private final Color DEFEND_COLOR = new Color(200, 255, 200);
    private final Color INACTIVE_COLOR = new Color(220, 220, 220);

    public GameWindow() {
        game = new DurakGame();

        setTitle("–ö–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞ –î—É—Ä–∞–∫");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout(10, 10));
        setPreferredSize(new Dimension(1200, 900));

        // –í–µ—Ä—Ö–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        JPanel topPanel = new JPanel(new BorderLayout(10, 0));
        topPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–æ–¥–µ –∏ –∫–æ–∑—ã—Ä–µ
        JPanel deckPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        deckPanel.setBackground(new Color(238, 238, 238));
        deckPanel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(Color.BLACK),
                BorderFactory.createEmptyBorder(5, 10, 5, 10)));

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–æ–¥—ã
        JLabel deckImage = new JLabel("üé¥");
        deckImage.setFont(new Font("Arial", Font.PLAIN, 48));
        deckPanel.add(deckImage);

        deckInfo = new JLabel();
        deckInfo.setFont(new Font("Arial", Font.BOLD, 16));
        deckPanel.add(deckInfo);
        topPanel.add(deckPanel, BorderLayout.WEST);

        // –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
        statusLabel = new JLabel();
        statusLabel.setFont(new Font("Arial", Font.BOLD, 20));
        statusLabel.setHorizontalAlignment(SwingConstants.CENTER);
        statusLabel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(Color.BLACK),
                BorderFactory.createEmptyBorder(10, 20, 10, 20)));
        statusLabel.setBackground(new Color(238, 238, 238));
        statusLabel.setOpaque(true);
        topPanel.add(statusLabel, BorderLayout.CENTER);

        add(topPanel, BorderLayout.NORTH);

        // –ü–∞–Ω–µ–ª—å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
        aiPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        aiPanel.setBackground(new Color(220, 237, 200));
        TitledBorder aiTitle = BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(Color.BLACK, 2),
                "–ö–∞—Ä—Ç—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞");
        aiTitle.setTitleFont(new Font("Arial", Font.BOLD, 16));
        aiPanel.setBorder(BorderFactory.createCompoundBorder(
                aiTitle,
                BorderFactory.createEmptyBorder(15, 10, 15, 10)));
        add(aiPanel, BorderLayout.NORTH);

        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–≥—Ä–æ–≤—ã–º —Å—Ç–æ–ª–æ–º
        JPanel centerPanel = new JPanel(new BorderLayout(10, 10));
        centerPanel.setBackground(new Color(76, 153, 0));
        centerPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // –ò–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª
        tablePanel = new JPanel();
        tablePanel.setBackground(new Color(76, 153, 0));
        TitledBorder tableTitle = BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(Color.BLACK, 2),
                "–ò–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª");
        tableTitle.setTitleFont(new Font("Arial", Font.BOLD, 16));
        tablePanel.setBorder(BorderFactory.createCompoundBorder(
                tableTitle,
                BorderFactory.createEmptyBorder(30, 20, 30, 20)));
        centerPanel.add(tablePanel, BorderLayout.CENTER);

        add(centerPanel, BorderLayout.CENTER);

        // –ü–∞–Ω–µ–ª—å –∏–≥—Ä–æ–∫–∞
        humanPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        humanPanel.setBackground(new Color(255, 223, 186));
        TitledBorder humanTitle = BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(Color.BLACK, 2),
                "–í–∞—à–∏ –∫–∞—Ä—Ç—ã");
        humanTitle.setTitleFont(new Font("Arial", Font.BOLD, 16));
        humanPanel.setBorder(BorderFactory.createCompoundBorder(
                humanTitle,
                BorderFactory.createEmptyBorder(15, 10, 15, 10)));
        add(humanPanel, BorderLayout.SOUTH);

        // –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        JPanel controlPanel = new JPanel(new GridLayout(6, 1, 5, 10));
        controlPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        controlPanel.setBackground(new Color(238, 238, 238));

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        endTurnButton = new JButton("–ë–∏—Ç–æ");
        takeCardsButton = new JButton("–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã");
        JButton helpButton = new JButton("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã");
        JButton newGameButton = new JButton("–ù–æ–≤–∞—è –∏–≥—Ä–∞");

        styleButton(endTurnButton);
        styleButton(takeCardsButton);
        styleButton(helpButton);
        styleButton(newGameButton);

        endTurnButton.addActionListener(e -> {
            game.endTurn();
            if (!game.isGameOver() && game.getAttacker() == game.getAI()) {
                game.makeAIMove();
            }
            updateUI();
        });

        takeCardsButton.addActionListener(e -> {
            game.takeCards();
            if (!game.isGameOver() && game.getAttacker() == game.getAI()) {
                game.makeAIMove();
            }
            updateUI();
        });

        helpButton.addActionListener(e -> showRules());

        newGameButton.addActionListener(e -> {
            int result = JOptionPane.showConfirmDialog(
                    this,
                    "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É?",
                    "–ù–æ–≤–∞—è –∏–≥—Ä–∞",
                    JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                dispose();
                new GameWindow().setVisible(true);
            }
        });

        controlPanel.add(endTurnButton);
        controlPanel.add(takeCardsButton);
        controlPanel.add(new JSeparator());
        controlPanel.add(helpButton);
        controlPanel.add(new JSeparator());
        controlPanel.add(newGameButton);

        add(controlPanel, BorderLayout.EAST);

        pack();
        setLocationRelativeTo(null);
        updateUI();
        showStartupHelp();
    }

    private void styleButton(JButton button) {
        button.setFont(new Font("Arial", Font.BOLD, 16));
        button.setBackground(new Color(70, 130, 180));
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(47, 79, 79), 2),
                BorderFactory.createEmptyBorder(15, 25, 15, 25)));
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }

    private void showStartupHelp() {
        SwingUtilities.invokeLater(() -> {
            JOptionPane.showMessageDialog(this,
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –î—É—Ä–∞–∫!\n\n" +
                            "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n" +
                            "‚Ä¢ –ê—Ç–∞–∫—É—é—â–∏–π –∏–≥—Ä–æ–∫ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç—Å—è —Ä–æ–∑–æ–≤—ã–º\n" +
                            "‚Ä¢ –ó–∞—â–∏—â–∞—é—â–∏–π—Å—è –∏–≥—Ä–æ–∫ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç—Å—è –∑–µ–ª–µ–Ω—ã–º\n" +
                            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É –≤ —Å–≤–æ–µ–π —Ä—É–∫–µ –¥–ª—è —Ö–æ–¥–∞\n" +
                            "‚Ä¢ –ö–Ω–æ–ø–∫–∞ '–ë–∏—Ç–æ' –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ö–æ–¥\n" +
                            "‚Ä¢ –ö–Ω–æ–ø–∫–∞ '–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã' - –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–±–∏—Ç—å—Å—è\n" +
                            "‚Ä¢ –ö–æ–∑—ã—Ä–Ω–∞—è –º–∞—Å—Ç—å –æ—Ç–º–µ—á–µ–Ω–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É\n",
                    "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å",
                    JOptionPane.INFORMATION_MESSAGE);
        });
    }

    private void showRules() {
        JOptionPane.showMessageDialog(this,
                "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã '–î—É—Ä–∞–∫':\n\n" +
                        "1. –¶–µ–ª—å –∏–≥—Ä—ã: –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö –∫–∞—Ä—Ç\n" +
                        "2. –ö–æ–∑—ã—Ä–Ω–∞—è –º–∞—Å—Ç—å –±—å—ë—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Å—Ç–∏\n" +
                        "3. –ö–∞—Ä—Ç—É –º–æ–∂–Ω–æ –±–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—à–µ–π –∫–∞—Ä—Ç–æ–π —Ç–æ–π –∂–µ –º–∞—Å—Ç–∏ –∏–ª–∏ –∫–æ–∑—ã—Ä–µ–º\n" +
                        "4. –ü—Ä–∏ –∞—Ç–∞–∫–µ –º–æ–∂–Ω–æ –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—ã —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞\n" +
                        "5. –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–±–∏—Ç—å—Å—è - –±–µ—Ä–∏—Ç–µ –≤—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞\n" +
                        "6. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∏ –¥–æ–±–∏—Ä–∞—é—Ç –∫–∞—Ä—Ç—ã –¥–æ 6\n\n" +
                        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n" +
                        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è —Ö–æ–¥–∞ –∏–ª–∏ –æ—Ç–±–æ—è\n" +
                        "‚Ä¢ '–ë–∏—Ç–æ' - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ö–æ–¥\n" +
                        "‚Ä¢ '–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã' - –∑–∞–±—Ä–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞",
                "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private void updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–¥–µ
        deckInfo.setText(String.format(" –ö–æ–∑—ã—Ä—å: %s | –í –∫–æ–ª–æ–¥–µ: %d –∫–∞—Ä—Ç",
                game.getDeck().getTrump().getSymbol(),
                game.getDeck().getSize()));

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –∏ —Ü–≤–µ—Ç–∞ –ø–∞–Ω–µ–ª–µ–π
        String status;
        if (game.isGameOver()) {
            status = "üèÜ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: " + game.getWinner();
            statusLabel.setBackground(new Color(255, 215, 0));
            aiPanel.setBackground(INACTIVE_COLOR);
            humanPanel.setBackground(INACTIVE_COLOR);
        } else {
            if (game.getAttacker() == game.getHuman()) {
                status = "üéØ –í–∞—à —Ö–æ–¥: –ê—Ç–∞–∫—É–π—Ç–µ!";
                statusLabel.setBackground(new Color(144, 238, 144));
                humanPanel.setBackground(ATTACK_COLOR);
                aiPanel.setBackground(DEFEND_COLOR);
            } else {
                status = "üõ°Ô∏è –í–∞—à —Ö–æ–¥: –ó–∞—â–∏—â–∞–π—Ç–µ—Å—å!";
                statusLabel.setBackground(new Color(255, 182, 193));
                humanPanel.setBackground(DEFEND_COLOR);
                aiPanel.setBackground(ATTACK_COLOR);
            }
        }
        statusLabel.setText(status);

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
        endTurnButton.setEnabled(!game.getTable().isEmpty());
        takeCardsButton.setEnabled(game.getDefender() == game.getHuman() && !game.getTable().isEmpty());

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–æ–≤
        updatePlayerCards(humanPanel, game.getHuman().getHand(), true);
        updatePlayerCards(aiPanel, game.getAI().getHand(), false);
        updateTableCards();

        revalidate();
        repaint();
    }

    private void updatePlayerCards(JPanel panel, List<Card> cards, boolean isHuman) {
        panel.removeAll();
        for (Card card : cards) {
            JButton cardButton = createCardButton(card, isHuman);
            if (isHuman) {
                cardButton.addActionListener(e -> {
                    selectedCard = card;
                    if (game.getAttacker() == game.getHuman()) {
                        if (game.attack(card)) {
                            if (!game.isGameOver()) {
                                game.makeAIMove();
                            }
                            updateUI();
                        } else {
                            showInvalidMoveMessage("–≠—Ç–æ–π –∫–∞—Ä—Ç–æ–π –Ω–µ–ª—å–∑—è —Ö–æ–¥–∏—Ç—å!");
                        }
                    } else if (game.getDefender() == game.getHuman()) {
                        if (game.defend(card)) {
                            if (!game.isGameOver()) {
                                game.makeAIMove();
                            }
                            updateUI();
                        } else {
                            showInvalidMoveMessage("–≠—Ç–æ–π –∫–∞—Ä—Ç–æ–π –Ω–µ–ª—å–∑—è –æ—Ç–±–∏—Ç—å—Å—è!");
                        }
                    }
                });
            }
            panel.add(cardButton);
        }
    }

    private JButton createCardButton(Card card, boolean isHuman) {
        JButton cardButton = new JButton();
        cardButton.setPreferredSize(new Dimension(100, 150));
        cardButton.setFont(new Font("Arial", Font.BOLD, 20));

        if (isHuman) {
            String suit = card.getSuit().getSymbol();
            Color textColor = (suit.equals("‚ô•") || suit.equals("‚ô¶")) ? Color.RED : Color.BLACK;
            cardButton.setForeground(textColor);

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–∑—ã—Ä–µ
            boolean isTrump = card.getSuit() == game.getDeck().getTrump();
            String trumpMark = isTrump ? "‚≠ê" : "";

            cardButton.setText(String.format("<html><center>%s%s<br><font size='+2'>%s</font></center></html>",
                    trumpMark, card.getRank(), suit));
        } else {
            cardButton.setText("üÇ†");
            cardButton.setFont(new Font("Arial", Font.PLAIN, 48));
        }

        cardButton.setBackground(Color.WHITE);
        cardButton.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(Color.BLACK, 2),
                BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        cardButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        return cardButton;
    }

    private void updateTableCards() {
        tablePanel.removeAll();
        tablePanel.setLayout(new FlowLayout(FlowLayout.CENTER, 30, 20));

        List<Card> tableCards = game.getTable();
        for (int i = 0; i < tableCards.size(); i += 2) {
            JPanel pairPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 5));
            pairPanel.setBackground(new Color(76, 153, 0));

            // –ê—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞
            pairPanel.add(createCardLabel(tableCards.get(i), true));

            // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–±–∏–≤–∞—é—â–∞—è –∫–∞—Ä—Ç–∞
            if (i + 1 < tableCards.size()) {
                pairPanel.add(createCardLabel(tableCards.get(i + 1), false));
            }

            tablePanel.add(pairPanel);
        }
    }

    private JLabel createCardLabel(Card card, boolean isAttacking) {
        JLabel cardLabel = new JLabel();
        cardLabel.setPreferredSize(new Dimension(100, 150));
        cardLabel.setHorizontalAlignment(SwingConstants.CENTER);
        cardLabel.setVerticalAlignment(SwingConstants.CENTER);

        String suit = card.getSuit().getSymbol();
        Color textColor = (suit.equals("‚ô•") || suit.equals("‚ô¶")) ? Color.RED : Color.BLACK;
        cardLabel.setForeground(textColor);

        boolean isTrump = card.getSuit() == game.getDeck().getTrump();
        String trumpMark = isTrump ? "‚≠ê" : "";

        cardLabel.setText(String.format("<html><center>%s%s<br><font size='+2'>%s</font></center></html>",
                trumpMark, card.getRank(), suit));

        cardLabel.setFont(new Font("Arial", Font.BOLD, 20));
        cardLabel.setBackground(Color.WHITE);
        cardLabel.setOpaque(true);
        cardLabel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(Color.BLACK, 2),
                BorderFactory.createEmptyBorder(5, 5, 5, 5)));

        return cardLabel;
    }

    private void showInvalidMoveMessage(String message) {
        JOptionPane.showMessageDialog(this,
                message,
                "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥",
                JOptionPane.WARNING_MESSAGE);
    }

    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }

        SwingUtilities.invokeLater(() -> {
            new GameWindow().setVisible(true);
        });
    }
}